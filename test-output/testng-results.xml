<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="25" passed="22" failed="3" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-07-08T03:11:56 IST" name="Demoblaze Automation Suite" finished-at="2025-07-08T03:17:18 IST" duration-ms="322234">
    <groups>
    </groups>
    <test started-at="2025-07-08T03:11:56 IST" name="Demoblaze Tests" finished-at="2025-07-08T03:17:18 IST" duration-ms="322234">
      <class name="tests.LoginTest">
        <test-method is-config="true" signature="setupReport()[pri:0, instance:tests.LoginTest@5aa9e4eb]" started-at="2025-07-08T03:11:55 IST" name="setupReport" finished-at="2025-07-08T03:11:56 IST" duration-ms="514" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupReport -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTest@5aa9e4eb]" started-at="2025-07-08T03:11:56 IST" name="setup" finished-at="2025-07-08T03:12:03 IST" duration-ms="6982" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginWithValidCredentials()[pri:1, instance:tests.LoginTest@5aa9e4eb]" started-at="2025-07-08T03:12:03 IST" name="loginWithValidCredentials" finished-at="2025-07-08T03:12:12 IST" duration-ms="9065" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithValidCredentials -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.LoginTest@5aa9e4eb]" started-at="2025-07-08T03:12:12 IST" name="tearDown" finished-at="2025-07-08T03:12:12 IST" duration-ms="533" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginWithValidCredentials status=SUCCESS method=LoginTest.loginWithValidCredentials()[pri:1, instance:tests.LoginTest@5aa9e4eb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTest@5aa9e4eb]" started-at="2025-07-08T03:12:12 IST" name="setup" finished-at="2025-07-08T03:12:15 IST" duration-ms="2389" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginWithWrongPassword()[pri:2, instance:tests.LoginTest@5aa9e4eb]" started-at="2025-07-08T03:12:15 IST" name="loginWithWrongPassword" finished-at="2025-07-08T03:12:23 IST" duration-ms="8463" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithWrongPassword -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.LoginTest@5aa9e4eb]" started-at="2025-07-08T03:12:23 IST" name="tearDown" finished-at="2025-07-08T03:12:24 IST" duration-ms="482" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginWithWrongPassword status=SUCCESS method=LoginTest.loginWithWrongPassword()[pri:2, instance:tests.LoginTest@5aa9e4eb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTest@5aa9e4eb]" started-at="2025-07-08T03:12:24 IST" name="setup" finished-at="2025-07-08T03:12:26 IST" duration-ms="2274" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginWithEmptyFields()[pri:3, instance:tests.LoginTest@5aa9e4eb]" started-at="2025-07-08T03:12:26 IST" name="loginWithEmptyFields" finished-at="2025-07-08T03:12:35 IST" duration-ms="8751" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithEmptyFields -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.LoginTest@5aa9e4eb]" started-at="2025-07-08T03:12:35 IST" name="tearDown" finished-at="2025-07-08T03:12:36 IST" duration-ms="662" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginWithEmptyFields status=SUCCESS method=LoginTest.loginWithEmptyFields()[pri:3, instance:tests.LoginTest@5aa9e4eb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTest@5aa9e4eb]" started-at="2025-07-08T03:12:36 IST" name="setup" finished-at="2025-07-08T03:12:38 IST" duration-ms="2175" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginWithInvalidEmailFormat()[pri:4, instance:tests.LoginTest@5aa9e4eb]" started-at="2025-07-08T03:12:38 IST" name="loginWithInvalidEmailFormat" finished-at="2025-07-08T03:12:45 IST" duration-ms="7811" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithInvalidEmailFormat -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.LoginTest@5aa9e4eb]" started-at="2025-07-08T03:12:45 IST" name="tearDown" finished-at="2025-07-08T03:12:46 IST" duration-ms="525" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginWithInvalidEmailFormat status=SUCCESS method=LoginTest.loginWithInvalidEmailFormat()[pri:4, instance:tests.LoginTest@5aa9e4eb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTest@5aa9e4eb]" started-at="2025-07-08T03:12:46 IST" name="setup" finished-at="2025-07-08T03:12:48 IST" duration-ms="2002" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyPasswordIsMasked()[pri:5, instance:tests.LoginTest@5aa9e4eb]" started-at="2025-07-08T03:12:48 IST" name="verifyPasswordIsMasked" finished-at="2025-07-08T03:12:54 IST" duration-ms="6448" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPasswordIsMasked -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.LoginTest@5aa9e4eb]" started-at="2025-07-08T03:12:54 IST" name="tearDown" finished-at="2025-07-08T03:12:55 IST" duration-ms="496" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPasswordIsMasked status=SUCCESS method=LoginTest.verifyPasswordIsMasked()[pri:5, instance:tests.LoginTest@5aa9e4eb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="flushReport()[pri:0, instance:tests.LoginTest@5aa9e4eb]" started-at="2025-07-08T03:17:18 IST" name="flushReport" finished-at="2025-07-08T03:17:19 IST" duration-ms="517" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flushReport -->
      </class> <!-- tests.LoginTest -->
      <class name="tests.OrderTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.OrderTest@3eb25e1a]" started-at="2025-07-08T03:14:24 IST" name="setup" finished-at="2025-07-08T03:14:26 IST" duration-ms="2531" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="placeOrderWithValidDetails()[pri:1, instance:tests.OrderTest@3eb25e1a]" started-at="2025-07-08T03:14:26 IST" name="placeOrderWithValidDetails" finished-at="2025-07-08T03:14:52 IST" duration-ms="25686" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- placeOrderWithValidDetails -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.OrderTest@3eb25e1a]" started-at="2025-07-08T03:14:52 IST" name="tearDown" finished-at="2025-07-08T03:14:52 IST" duration-ms="460" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=placeOrderWithValidDetails status=SUCCESS method=OrderTest.placeOrderWithValidDetails()[pri:1, instance:tests.OrderTest@3eb25e1a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.OrderTest@3eb25e1a]" started-at="2025-07-08T03:14:52 IST" name="setup" finished-at="2025-07-08T03:14:54 IST" duration-ms="2000" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="placeOrderWithEmptyForm()[pri:2, instance:tests.OrderTest@3eb25e1a]" started-at="2025-07-08T03:14:54 IST" name="placeOrderWithEmptyForm" finished-at="2025-07-08T03:15:17 IST" duration-ms="22983" status="FAIL">
          <exception class="org.openqa.selenium.UnhandledAlertException">
            <message>
              <![CDATA[unexpected alert open: {Alert text : Please fill out Name and Creditcard.}
  (Session info: chrome=137.0.7151.120): Please fill out Name and Creditcard.
Build info: version: '4.19.1', revision: 'abe0ee07dc'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '21.0.7'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [8f99f3480e334dbbf76907f57dd38a5b, findElements {using=id, value=orderModalLabel}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 137.0.7151.120, chrome: {chromedriverVersion: 137.0.7151.119 (e0ac9d12dff..., userDataDir: C:\Users\Sathya\AppData\Loc...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:58701}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:58701/devtoo..., se:cdpVersion: 137.0.7151.120, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 8f99f3480e334dbbf76907f57dd38a5b]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.UnhandledAlertException: unexpected alert open: {Alert text : Please fill out Name and Creditcard.}
  (Session info: chrome=137.0.7151.120): Please fill out Name and Creditcard.
Build info: version: '4.19.1', revision: 'abe0ee07dc'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '21.0.7'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [8f99f3480e334dbbf76907f57dd38a5b, findElements {using=id, value=orderModalLabel}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 137.0.7151.120, chrome: {chromedriverVersion: 137.0.7151.119 (e0ac9d12dff..., userDataDir: C:\Users\Sathya\AppData\Loc...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:58701}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:58701/devtoo..., se:cdpVersion: 137.0.7151.120, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 8f99f3480e334dbbf76907f57dd38a5b
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:136)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElements(ElementLocation.java:182)
at org.openqa.selenium.remote.ElementLocation.findElements(ElementLocation.java:103)
at org.openqa.selenium.remote.RemoteWebDriver.findElements(RemoteWebDriver.java:368)
at org.openqa.selenium.remote.RemoteWebDriver.findElements(RemoteWebDriver.java:362)
at tests.OrderTest.placeOrderWithEmptyForm(OrderTest.java:90)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:228)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:961)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:201)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:819)
at org.testng.TestRunner.run(TestRunner.java:619)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1228)
at org.testng.TestNG.runSuites(TestNG.java:1134)
at org.testng.TestNG.run(TestNG.java:1101)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.UnhandledAlertException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- placeOrderWithEmptyForm -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.OrderTest@3eb25e1a]" started-at="2025-07-08T03:15:17 IST" name="tearDown" finished-at="2025-07-08T03:15:18 IST" duration-ms="799" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=placeOrderWithEmptyForm status=FAILURE method=OrderTest.placeOrderWithEmptyForm()[pri:2, instance:tests.OrderTest@3eb25e1a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.OrderTest@3eb25e1a]" started-at="2025-07-08T03:15:18 IST" name="setup" finished-at="2025-07-08T03:15:21 IST" duration-ms="2291" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyOrderConfirmationPopup()[pri:3, instance:tests.OrderTest@3eb25e1a]" started-at="2025-07-08T03:15:21 IST" name="verifyOrderConfirmationPopup" finished-at="2025-07-08T03:15:47 IST" duration-ms="26043" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyOrderConfirmationPopup -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.OrderTest@3eb25e1a]" started-at="2025-07-08T03:15:47 IST" name="tearDown" finished-at="2025-07-08T03:15:47 IST" duration-ms="484" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyOrderConfirmationPopup status=SUCCESS method=OrderTest.verifyOrderConfirmationPopup()[pri:3, instance:tests.OrderTest@3eb25e1a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.OrderTest -->
      <class name="tests.SignupTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.SignupTest@662ac478]" started-at="2025-07-08T03:12:55 IST" name="setup" finished-at="2025-07-08T03:12:57 IST" duration-ms="2048" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="signUpWithUniqueCredentials()[pri:1, instance:tests.SignupTest@662ac478]" started-at="2025-07-08T03:12:57 IST" name="signUpWithUniqueCredentials" finished-at="2025-07-08T03:13:05 IST" duration-ms="8419" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- signUpWithUniqueCredentials -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.SignupTest@662ac478]" started-at="2025-07-08T03:13:05 IST" name="tearDown" finished-at="2025-07-08T03:13:06 IST" duration-ms="413" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=signUpWithUniqueCredentials status=SUCCESS method=SignupTest.signUpWithUniqueCredentials()[pri:1, instance:tests.SignupTest@662ac478] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.SignupTest@662ac478]" started-at="2025-07-08T03:13:06 IST" name="setup" finished-at="2025-07-08T03:13:08 IST" duration-ms="1989" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="signUpWithExistingUsername()[pri:2, instance:tests.SignupTest@662ac478]" started-at="2025-07-08T03:13:08 IST" name="signUpWithExistingUsername" finished-at="2025-07-08T03:13:17 IST" duration-ms="8681" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- signUpWithExistingUsername -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.SignupTest@662ac478]" started-at="2025-07-08T03:13:17 IST" name="tearDown" finished-at="2025-07-08T03:13:17 IST" duration-ms="470" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=signUpWithExistingUsername status=SUCCESS method=SignupTest.signUpWithExistingUsername()[pri:2, instance:tests.SignupTest@662ac478] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.SignupTest@662ac478]" started-at="2025-07-08T03:13:17 IST" name="setup" finished-at="2025-07-08T03:13:19 IST" duration-ms="2053" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="signUpWithEmptyFields()[pri:3, instance:tests.SignupTest@662ac478]" started-at="2025-07-08T03:13:19 IST" name="signUpWithEmptyFields" finished-at="2025-07-08T03:13:27 IST" duration-ms="8206" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- signUpWithEmptyFields -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.SignupTest@662ac478]" started-at="2025-07-08T03:13:27 IST" name="tearDown" finished-at="2025-07-08T03:13:28 IST" duration-ms="460" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=signUpWithEmptyFields status=SUCCESS method=SignupTest.signUpWithEmptyFields()[pri:3, instance:tests.SignupTest@662ac478] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.SignupTest -->
      <class name="tests.CartTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.CartTest@6743e411]" started-at="2025-07-08T03:13:28 IST" name="setup" finished-at="2025-07-08T03:13:30 IST" duration-ms="2071" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="addProductToCart()[pri:1, instance:tests.CartTest@6743e411]" started-at="2025-07-08T03:13:30 IST" name="addProductToCart" finished-at="2025-07-08T03:13:46 IST" duration-ms="16558" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addProductToCart -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.CartTest@6743e411]" started-at="2025-07-08T03:13:46 IST" name="tearDown" finished-at="2025-07-08T03:13:47 IST" duration-ms="436" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=addProductToCart status=SUCCESS method=CartTest.addProductToCart()[pri:1, instance:tests.CartTest@6743e411] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.CartTest@6743e411]" started-at="2025-07-08T03:13:47 IST" name="setup" finished-at="2025-07-08T03:13:50 IST" duration-ms="2943" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="viewCartWithAddedProducts()[pri:2, instance:tests.CartTest@6743e411]" started-at="2025-07-08T03:13:50 IST" name="viewCartWithAddedProducts" finished-at="2025-07-08T03:13:50 IST" duration-ms="101" status="FAIL">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//a[text()='Samsung galaxy s6']"}
  (Session info: chrome=137.0.7151.120)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.19.1', revision: 'abe0ee07dc'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '21.0.7'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [286744c1d91ebc2088847dc648ff4616, findElement {using=xpath, value=//a[text()='Samsung galaxy s6']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 137.0.7151.120, chrome: {chromedriverVersion: 137.0.7151.119 (e0ac9d12dff..., userDataDir: C:\Users\Sathya\AppData\Loc...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:58581}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:58581/devtoo..., se:cdpVersion: 137.0.7151.120, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 286744c1d91ebc2088847dc648ff4616]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//a[text()='Samsung galaxy s6']"}
  (Session info: chrome=137.0.7151.120)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.19.1', revision: 'abe0ee07dc'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '21.0.7'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [286744c1d91ebc2088847dc648ff4616, findElement {using=xpath, value=//a[text()='Samsung galaxy s6']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 137.0.7151.120, chrome: {chromedriverVersion: 137.0.7151.119 (e0ac9d12dff..., userDataDir: C:\Users\Sathya\AppData\Loc...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:58581}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:58581/devtoo..., se:cdpVersion: 137.0.7151.120, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 286744c1d91ebc2088847dc648ff4616
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:486)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at tests.CartTest.viewCartWithAddedProducts(CartTest.java:37)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:228)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:961)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:201)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:819)
at org.testng.TestRunner.run(TestRunner.java:619)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1228)
at org.testng.TestNG.runSuites(TestNG.java:1134)
at org.testng.TestNG.run(TestNG.java:1101)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- viewCartWithAddedProducts -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.CartTest@6743e411]" started-at="2025-07-08T03:13:50 IST" name="tearDown" finished-at="2025-07-08T03:13:51 IST" duration-ms="692" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=viewCartWithAddedProducts status=FAILURE method=CartTest.viewCartWithAddedProducts()[pri:2, instance:tests.CartTest@6743e411] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.CartTest@6743e411]" started-at="2025-07-08T03:13:51 IST" name="setup" finished-at="2025-07-08T03:13:53 IST" duration-ms="2038" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="removeProductFromCart()[pri:3, instance:tests.CartTest@6743e411]" started-at="2025-07-08T03:13:53 IST" name="removeProductFromCart" finished-at="2025-07-08T03:13:56 IST" duration-ms="3507" status="FAIL">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//table[@id='cartTable']//a[contains(text(),'Delete')]"}
  (Session info: chrome=137.0.7151.120)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.19.1', revision: 'abe0ee07dc'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '21.0.7'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [efbc5f5bd17dbcf2bd9dbfea1eea931c, findElement {using=xpath, value=//table[@id='cartTable']//a[contains(text(),'Delete')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 137.0.7151.120, chrome: {chromedriverVersion: 137.0.7151.119 (e0ac9d12dff..., userDataDir: C:\Users\Sathya\AppData\Loc...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:58598}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:58598/devtoo..., se:cdpVersion: 137.0.7151.120, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: efbc5f5bd17dbcf2bd9dbfea1eea931c]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//table[@id='cartTable']//a[contains(text(),'Delete')]"}
  (Session info: chrome=137.0.7151.120)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.19.1', revision: 'abe0ee07dc'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '21.0.7'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [efbc5f5bd17dbcf2bd9dbfea1eea931c, findElement {using=xpath, value=//table[@id='cartTable']//a[contains(text(),'Delete')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 137.0.7151.120, chrome: {chromedriverVersion: 137.0.7151.119 (e0ac9d12dff..., userDataDir: C:\Users\Sathya\AppData\Loc...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:58598}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:58598/devtoo..., se:cdpVersion: 137.0.7151.120, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: efbc5f5bd17dbcf2bd9dbfea1eea931c
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:486)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at tests.CartTest.removeProductFromCart(CartTest.java:56)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:228)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:961)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:201)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:819)
at org.testng.TestRunner.run(TestRunner.java:619)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1228)
at org.testng.TestNG.runSuites(TestNG.java:1134)
at org.testng.TestNG.run(TestNG.java:1101)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- removeProductFromCart -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.CartTest@6743e411]" started-at="2025-07-08T03:13:56 IST" name="tearDown" finished-at="2025-07-08T03:13:57 IST" duration-ms="613" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=removeProductFromCart status=FAILURE method=CartTest.removeProductFromCart()[pri:3, instance:tests.CartTest@6743e411] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.CartTest@6743e411]" started-at="2025-07-08T03:13:57 IST" name="setup" finished-at="2025-07-08T03:13:59 IST" duration-ms="2070" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="addMultipleProductsToCart()[pri:4, instance:tests.CartTest@6743e411]" started-at="2025-07-08T03:13:59 IST" name="addMultipleProductsToCart" finished-at="2025-07-08T03:14:23 IST" duration-ms="24591" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addMultipleProductsToCart -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.CartTest@6743e411]" started-at="2025-07-08T03:14:23 IST" name="tearDown" finished-at="2025-07-08T03:14:24 IST" duration-ms="433" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=addMultipleProductsToCart status=SUCCESS method=CartTest.addMultipleProductsToCart()[pri:4, instance:tests.CartTest@6743e411] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.CartTest -->
      <class name="tests.UIUXTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.UIUXTest@f5958c9]" started-at="2025-07-08T03:16:40 IST" name="setup" finished-at="2025-07-08T03:16:42 IST" duration-ms="1717" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyProductTileAlignment()[pri:1, instance:tests.UIUXTest@f5958c9]" started-at="2025-07-08T03:16:42 IST" name="verifyProductTileAlignment" finished-at="2025-07-08T03:16:45 IST" duration-ms="3536" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyProductTileAlignment -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.UIUXTest@f5958c9]" started-at="2025-07-08T03:16:45 IST" name="tearDown" finished-at="2025-07-08T03:16:46 IST" duration-ms="385" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyProductTileAlignment status=SUCCESS method=UIUXTest.verifyProductTileAlignment()[pri:1, instance:tests.UIUXTest@f5958c9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.UIUXTest@f5958c9]" started-at="2025-07-08T03:16:46 IST" name="setup" finished-at="2025-07-08T03:16:47 IST" duration-ms="1835" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="checkVisibilityOfActionButtons()[pri:2, instance:tests.UIUXTest@f5958c9]" started-at="2025-07-08T03:16:47 IST" name="checkVisibilityOfActionButtons" finished-at="2025-07-08T03:16:51 IST" duration-ms="3485" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkVisibilityOfActionButtons -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.UIUXTest@f5958c9]" started-at="2025-07-08T03:16:51 IST" name="tearDown" finished-at="2025-07-08T03:16:51 IST" duration-ms="382" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=checkVisibilityOfActionButtons status=SUCCESS method=UIUXTest.checkVisibilityOfActionButtons()[pri:2, instance:tests.UIUXTest@f5958c9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.UIUXTest@f5958c9]" started-at="2025-07-08T03:16:51 IST" name="setup" finished-at="2025-07-08T03:16:53 IST" duration-ms="1856" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="checkFontConsistency()[pri:3, instance:tests.UIUXTest@f5958c9]" started-at="2025-07-08T03:16:53 IST" name="checkFontConsistency" finished-at="2025-07-08T03:16:57 IST" duration-ms="3316" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkFontConsistency -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.UIUXTest@f5958c9]" started-at="2025-07-08T03:16:57 IST" name="tearDown" finished-at="2025-07-08T03:16:57 IST" duration-ms="369" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=checkFontConsistency status=SUCCESS method=UIUXTest.checkFontConsistency()[pri:3, instance:tests.UIUXTest@f5958c9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.UIUXTest@f5958c9]" started-at="2025-07-08T03:16:57 IST" name="setup" finished-at="2025-07-08T03:16:59 IST" duration-ms="2014" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testAlertPopupStyling()[pri:4, instance:tests.UIUXTest@f5958c9]" started-at="2025-07-08T03:16:59 IST" name="testAlertPopupStyling" finished-at="2025-07-08T03:17:07 IST" duration-ms="8549" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAlertPopupStyling -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.UIUXTest@f5958c9]" started-at="2025-07-08T03:17:07 IST" name="tearDown" finished-at="2025-07-08T03:17:08 IST" duration-ms="452" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testAlertPopupStyling status=SUCCESS method=UIUXTest.testAlertPopupStyling()[pri:4, instance:tests.UIUXTest@f5958c9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.UIUXTest -->
      <class name="tests.ProductBrowsingTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.ProductBrowsingTest@477b4cdf]" started-at="2025-07-08T03:15:47 IST" name="setup" finished-at="2025-07-08T03:15:49 IST" duration-ms="1998" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="browsePhonesCategory()[pri:1, instance:tests.ProductBrowsingTest@477b4cdf]" started-at="2025-07-08T03:15:49 IST" name="browsePhonesCategory" finished-at="2025-07-08T03:15:54 IST" duration-ms="4819" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- browsePhonesCategory -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.ProductBrowsingTest@477b4cdf]" started-at="2025-07-08T03:15:54 IST" name="tearDown" finished-at="2025-07-08T03:15:54 IST" duration-ms="481" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=browsePhonesCategory status=SUCCESS method=ProductBrowsingTest.browsePhonesCategory()[pri:1, instance:tests.ProductBrowsingTest@477b4cdf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.ProductBrowsingTest@477b4cdf]" started-at="2025-07-08T03:15:54 IST" name="setup" finished-at="2025-07-08T03:15:56 IST" duration-ms="2097" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="viewProductDetails()[pri:2, instance:tests.ProductBrowsingTest@477b4cdf]" started-at="2025-07-08T03:15:56 IST" name="viewProductDetails" finished-at="2025-07-08T03:16:03 IST" duration-ms="6108" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- viewProductDetails -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.ProductBrowsingTest@477b4cdf]" started-at="2025-07-08T03:16:03 IST" name="tearDown" finished-at="2025-07-08T03:16:03 IST" duration-ms="388" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=viewProductDetails status=SUCCESS method=ProductBrowsingTest.viewProductDetails()[pri:2, instance:tests.ProductBrowsingTest@477b4cdf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.ProductBrowsingTest@477b4cdf]" started-at="2025-07-08T03:16:03 IST" name="setup" finished-at="2025-07-08T03:16:05 IST" duration-ms="1704" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="navigateToHomeFromNavbar()[pri:3, instance:tests.ProductBrowsingTest@477b4cdf]" started-at="2025-07-08T03:16:05 IST" name="navigateToHomeFromNavbar" finished-at="2025-07-08T03:16:11 IST" duration-ms="6178" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- navigateToHomeFromNavbar -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.ProductBrowsingTest@477b4cdf]" started-at="2025-07-08T03:16:11 IST" name="tearDown" finished-at="2025-07-08T03:16:11 IST" duration-ms="374" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=navigateToHomeFromNavbar status=SUCCESS method=ProductBrowsingTest.navigateToHomeFromNavbar()[pri:3, instance:tests.ProductBrowsingTest@477b4cdf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.ProductBrowsingTest@477b4cdf]" started-at="2025-07-08T03:16:11 IST" name="setup" finished-at="2025-07-08T03:16:13 IST" duration-ms="1681" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="navigateUsingNavbarLinks()[pri:4, instance:tests.ProductBrowsingTest@477b4cdf]" started-at="2025-07-08T03:16:13 IST" name="navigateUsingNavbarLinks" finished-at="2025-07-08T03:16:25 IST" duration-ms="12100" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- navigateUsingNavbarLinks -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.ProductBrowsingTest@477b4cdf]" started-at="2025-07-08T03:16:25 IST" name="tearDown" finished-at="2025-07-08T03:16:26 IST" duration-ms="475" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=navigateUsingNavbarLinks status=SUCCESS method=ProductBrowsingTest.navigateUsingNavbarLinks()[pri:4, instance:tests.ProductBrowsingTest@477b4cdf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.ProductBrowsingTest -->
      <class name="tests.ResponsiveDesignTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.ResponsiveDesignTest@233795b6]" started-at="2025-07-08T03:17:08 IST" name="setup" finished-at="2025-07-08T03:17:10 IST" duration-ms="1948" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyNoHorizontalScroll()[pri:0, instance:tests.ResponsiveDesignTest@233795b6]" started-at="2025-07-08T03:17:10 IST" name="verifyNoHorizontalScroll" finished-at="2025-07-08T03:17:18 IST" duration-ms="7736" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyNoHorizontalScroll -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.ResponsiveDesignTest@233795b6]" started-at="2025-07-08T03:17:18 IST" name="tearDown" finished-at="2025-07-08T03:17:18 IST" duration-ms="433" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyNoHorizontalScroll status=SUCCESS method=ResponsiveDesignTest.verifyNoHorizontalScroll()[pri:0, instance:tests.ResponsiveDesignTest@233795b6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.ResponsiveDesignTest -->
      <class name="tests.LogoutTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LogoutTest@77c2494c]" started-at="2025-07-08T03:16:26 IST" name="setup" finished-at="2025-07-08T03:16:27 IST" duration-ms="1962" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyLogoutAfterLogin()[pri:0, instance:tests.LogoutTest@77c2494c]" started-at="2025-07-08T03:16:27 IST" name="verifyLogoutAfterLogin" finished-at="2025-07-08T03:16:40 IST" duration-ms="12083" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLogoutAfterLogin -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.LogoutTest@77c2494c]" started-at="2025-07-08T03:16:40 IST" name="tearDown" finished-at="2025-07-08T03:16:40 IST" duration-ms="403" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyLogoutAfterLogin status=SUCCESS method=LogoutTest.verifyLogoutAfterLogin()[pri:0, instance:tests.LogoutTest@77c2494c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.LogoutTest -->
    </test> <!-- Demoblaze Tests -->
  </suite> <!-- Demoblaze Automation Suite -->
</testng-results>
